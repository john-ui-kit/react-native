{"version":3,"sources":["TimerText.tsx"],"names":["React","useEffect","useMemo","useState","TimerText","props","unit","countDown","setCountDown","endTimestamp","Date","getTime","timer","timeDate","hour","parseInt","minute","second","start","clearInterval","time","expiryTimestamp","ms","setInterval","slot"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAUZ;AACD,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAsBD,KAA5B,CADC,CAED;;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAMM,YAAY,GAAGP,OAAO,CAAC,MAAM;AACjC,QAAII,IAAI,IAAI,QAAZ,EAAsB;AACpB,aAAO,IAAII,IAAJ,GAAWC,OAAX,KAAuBJ,SAAS,GAAG,IAAZ,GAAmB,EAAjD;AACD,KAFD,MAEO;AACL,aAAO,IAAIG,IAAJ,GAAWC,OAAX,KAAuBJ,SAAS,GAAG,IAA1C;AACD;AACF,GAN2B,EAMzB,CAACA,SAAD,CANyB,CAA5B;AAOA,MAAIK,KAAU,GAAG,IAAjB;AACA,QAAMC,QAAQ,GAAGX,OAAO,CAIrB,MAAM;AACP,QAAII,IAAI,IAAI,QAAZ,EAAsB;AACpB,aAAO;AACLQ,QAAAA,IAAI,EAAEC,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAG,EAAnB,CADT;AAELS,QAAAA,MAAM,EAAED,QAAQ,CAAE,GAAER,SAAU,EAAd,CAAR,GAA2B;AAF9B,OAAP;AAID,KALD,MAKO;AACL,aAAO;AACLO,QAAAA,IAAI,EAAEC,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAZ,GAAiB,EAAG,EAAxB,CADT;AAELS,QAAAA,MAAM,EAAED,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAG,EAAnB,CAAR,GAAgC,EAFnC;AAGLU,QAAAA,MAAM,EAAEF,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAG,EAAnB;AAHX,OAAP;AAKD;AACF,GAjBuB,EAiBrB,CAACA,SAAD,EAAYD,IAAZ,CAjBqB,CAAxB;;AAkBA,QAAMY,KAAK,GAAG,MAAM;AAClBC,IAAAA,aAAa,CAACP,KAAD,CAAb;AAEA,QAAIQ,IAAY,GAAGf,KAAK,CAACgB,eAAzB;AACA,QAAIC,EAAU,GAAG,CAAjB;;AACA,QAAIhB,IAAI,IAAI,QAAZ,EAAsB;AACpBgB,MAAAA,EAAE,GAAG,IAAL;AACD,KAFD,MAEO,IAAIhB,IAAI,IAAI,QAAZ,EAAsB;AAC3BgB,MAAAA,EAAE,GAAG,OAAO,EAAZ;AACD;;AACDd,IAAAA,YAAY,CAACY,IAAD,CAAZ;AAEAR,IAAAA,KAAK,GAAGW,WAAW,CAAC,MAAM;AACxB,UAAIH,IAAI,IAAI,CAAZ,EAAe;AACbD,QAAAA,aAAa,CAACP,KAAD,CAAb;AACA;AACD;;AACDQ,MAAAA,IAAI;AACJZ,MAAAA,YAAY,CAACY,IAAD,CAAZ;AACD,KAPkB,EAOhBE,EAPgB,CAAnB;AAQD,GApBD,CA9BC,CAmDD;AACA;AACA;AACA;AACA;;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,KAAK;AACL,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACP,KAAD,CAAb;AACD,KAFD;AAGD,GALQ,EAKN,CAACP,KAAK,CAACgB,eAAP,CALM,CAAT;AAOA,sBAAO,0CAAGhB,KAAK,CAACmB,IAAN,CAAW;AAAEf,IAAAA,YAAF;AAAgBF,IAAAA,SAAhB;AAA2B,OAAGM;AAA9B,GAAX,CAAH,CAAP;AACD","sourcesContent":["/*\n * @Author: John\n * @Date: 2021-06-30 15:53:03\n * @LastEditors: John\n * @LastEditTime: 2021-07-29 15:23:15\n */\nimport React, { useEffect, useMemo, useState } from 'react';\n\nexport default function TimerText(props: {\n  unit: 'second' | 'minute';\n  slot: React.FunctionComponent<{\n    endTimestamp: number;\n    countDown: number;\n    hour: number;\n    second?: number;\n    minute: number;\n  }>;\n  expiryTimestamp: number;\n}) {\n  const { unit = 'second' } = props;\n  // const [expiryTimestamp, setExpiryTimestamp] = useState(0);\n  const [countDown, setCountDown] = useState(0);\n  const endTimestamp = useMemo(() => {\n    if (unit == 'minute') {\n      return new Date().getTime() + countDown * 1000 * 60;\n    } else {\n      return new Date().getTime() + countDown * 1000;\n    }\n  }, [countDown]);\n  let timer: any = null;\n  const timeDate = useMemo<{\n    hour: number;\n    second?: number;\n    minute: number;\n  }>(() => {\n    if (unit == 'minute') {\n      return {\n        hour: parseInt(`${countDown / 60}`),\n        minute: parseInt(`${countDown}`) % 60,\n      };\n    } else {\n      return {\n        hour: parseInt(`${countDown / 60 / 60}`),\n        minute: parseInt(`${countDown / 60}`) % 60,\n        second: parseInt(`${countDown % 60}`),\n      };\n    }\n  }, [countDown, unit]);\n  const start = () => {\n    clearInterval(timer);\n\n    let time: number = props.expiryTimestamp;\n    let ms: number = 0;\n    if (unit == 'second') {\n      ms = 1000;\n    } else if (unit == 'minute') {\n      ms = 1000 * 60;\n    }\n    setCountDown(time);\n\n    timer = setInterval(() => {\n      if (time == 0) {\n        clearInterval(timer);\n        return;\n      }\n      time--;\n      setCountDown(time);\n    }, ms);\n  };\n  // const stop = () => {\n  //   clearInterval(timer);\n  //   setCountDown(0);\n  //   // setExpiryTimestamp(0);\n  // };\n  useEffect(() => {\n    start();\n    return () => {\n      clearInterval(timer);\n    };\n  }, [props.expiryTimestamp]);\n\n  return <>{props.slot({ endTimestamp, countDown, ...timeDate })}</>;\n}\n"]}