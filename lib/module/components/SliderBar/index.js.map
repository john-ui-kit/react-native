{"version":3,"sources":["index.tsx"],"names":["React","forwardRef","useEffect","useImperativeHandle","useMemo","useRef","useState","View","Image","PanResponder","Text","IMAGES_ASSETS","LinearGradient","SliderBar","props","ref","sliderbtnDistance","setSliderbtnDistance","sliderBtnMoving","setSliderBtnMoving","sliderBtnWidth","sliderWidth","current","max","min","step","value","finalNumRef","sliderStep","valueToSliderDistance","v","changeSliderDistance","num","Promise","reslove","distance","percentage","parseInt","toFixed","SliderBtnResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","_evt","gestureState","dx","onPanResponderTerminationRequest","onPanResponderRelease","console","log","finalChange","onPanResponderTerminate","onShouldBlockNativeResponder","SliderResponder","onPanResponderGrant","evt","nativeEvent","locationX","setValue","onChange","resetValue","marginTop","display","flexDirection","alignItems","panHandlers","width","height","backgroundColor","borderRadius","borderWidth","borderStyle","borderColor","justifyContent","paddingHorizontal","position","marginRight","x","y","left","transform","scale","opacity","top","bubble","fontSize","lineHeight","color","textAlign","slider_btn","then","slider_icon_left","slider_icon_right"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { View, Image, PanResponder, Text } from \"react-native\";\nimport IMAGES_ASSETS from \"../../assets/images\";\nimport LinearGradient from \"react-native-linear-gradient\";\n/**\n * 传值\n */\ntype SliderBarProps = {\n  max?: number;\n  min?: number;\n  step?: number;\n  value?: number;\n  onChange?: (num: number) => void;\n  onPanResponderRelease?: (num: number) => void;\n  onPanResponderMove?: (num: number) => void;\n  resetValue?: (reset: (value: number) => void) => void;\n  finalChange?: (num: number) => void;\n};\n\n/**\n * 对外导出控制方法\n */\nexport type SliderBarRef = {\n  setValue: (num: number) => void;\n};\nconst SliderBar: React.ForwardRefRenderFunction<SliderBarRef, SliderBarProps> =\n  (props, ref) => {\n    /**\n     * 滑块按钮滑动的位置\n     */\n    const [sliderbtnDistance, setSliderbtnDistance] = useState(0);\n    /**\n     * 按钮是否正在滑动\n     */\n    const [sliderBtnMoving, setSliderBtnMoving] = useState(false);\n    /**\n     * 滑块按钮的宽度\n     */\n    const sliderBtnWidth = useRef<number>(32);\n    /**\n     * 滑块的宽度\n     */\n    const sliderWidth = useRef<number>(210 - sliderBtnWidth.current);\n    /**\n     * 默认值\n     */\n    const { max = 100, min = 0, step = 1, value = min } = props;\n    /**\n     * 对外导出的持久化数据num\n     */\n    let finalNumRef = useRef<number>(0);\n    /**\n     * 滑块的步长\n     */\n    const sliderStep = useMemo(\n      () => (step / (max - min)) * sliderWidth.current,\n      [step, sliderWidth]\n    );\n\n    /**\n     * 根据传值转换为滑块的滑动距离\n     * @param v\n     * @returns\n     */\n    const valueToSliderDistance = (v: number) => {\n      return ((v - min) / step) * sliderStep;\n    };\n\n    /**\n     * 滑块变化\n     * @param num\n     * @returns\n     */\n    const changeSliderDistance = (num: number) => {\n      return new Promise<void>((reslove) => {\n        let distance: number = num;\n        if (num <= 0) {\n          distance = 0;\n        }\n        if (num >= sliderWidth.current) {\n          distance = sliderWidth.current;\n        }\n        const percentage = (100 / sliderWidth.current) * distance;\n        finalNumRef.current = parseInt(\n          ((percentage / 100) * (max - min) + min).toFixed(0)\n        );\n        setSliderbtnDistance(distance);\n        reslove();\n      });\n    };\n\n    /**\n     * sliderBtn滑动响应\n     */\n    const SliderBtnResponder = PanResponder.create({\n      // 要求成为响应者：\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n      onPanResponderMove: (_evt, gestureState) => {\n        // 最近一次的移动距离为gestureState.move{X,Y}\n        // 从成为响应者开始时的累计手势移动距离为gestureState.d{x,y}\n        changeSliderDistance(sliderbtnDistance + gestureState.dx);\n        setSliderBtnMoving(true);\n        props.onPanResponderMove?.(finalNumRef.current);\n      },\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderRelease: () => {\n        // 用户放开了所有的触摸点，且此时视图已经成为了响应者。\n        // 一般来说这意味着一个手势操作已经成功完成。\n        console.log(\"滑动结束\");\n        setSliderBtnMoving(false);\n        // props.onPanResponderRelease?.(finalNum);\n        props.finalChange?.(finalNumRef.current);\n      },\n      onPanResponderTerminate: () => {\n        // 另一个组件已经成为了新的响应者，所以当前手势将被取消。\n      },\n      onShouldBlockNativeResponder: () => {\n        // 返回一个布尔值，决定当前组件是否应该阻止原生组件成为JS响应者\n        // 默认返回true。目前暂时只支持android。\n        return true;\n      },\n    });\n\n    /**\n     * slider滑动响应\n     */\n    const SliderResponder = PanResponder.create({\n      // 要求成为响应者：\n      onStartShouldSetPanResponder: () => true,\n      onStartShouldSetPanResponderCapture: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n\n      onPanResponderGrant: (evt) => {\n        // 开始手势操作。给用户一些视觉反馈，让他们知道发生了什么事情！\n        changeSliderDistance(evt.nativeEvent.locationX);\n      },\n      onPanResponderTerminationRequest: () => true,\n      onPanResponderRelease: () => {\n        // 用户放开了所有的触摸点，且此时视图已经成为了响应者。\n        // 一般来说这意味着一个手势操作已经成功完成。\n        console.log(\"滑动结束\");\n        setSliderBtnMoving(false);\n        // props.onPanResponderRelease?.(finalNum);\n        props.finalChange?.(finalNumRef.current);\n      },\n      onPanResponderTerminate: () => {\n        // 另一个组件已经成为了新的响应者，所以当前手势将被取消。\n      },\n      onShouldBlockNativeResponder: () => {\n        // 返回一个布尔值，决定当前组件是否应该阻止原生组件成为JS响应者\n        // 默认返回true。目前暂时只支持android。\n        return true;\n      },\n    });\n\n    /**\n     * 父组件控制子组件回调\n     */\n    useImperativeHandle(ref, () => {\n      return {\n        setValue(v) {\n          console.log(\"调用子组件\");\n          changeSliderDistance(valueToSliderDistance(v));\n        },\n      };\n    });\n\n    useEffect(() => {\n      console.log(\"======\", finalNumRef.current);\n      props.onChange?.(finalNumRef.current);\n      return () => {};\n    }, [finalNumRef.current]);\n\n    /**\n     * 初始化\n     */\n    useEffect(() => {\n      changeSliderDistance(valueToSliderDistance(value));\n      props.resetValue?.((v) => {\n        changeSliderDistance(valueToSliderDistance(v));\n      });\n      return () => {};\n    }, [value, sliderStep, step]);\n\n    return (\n      <View\n        style={{\n          marginTop: 37,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n        }}\n      >\n        {/* 滑块组件 */}\n        <View\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n          }}\n        >\n          {/* 滑块底部组件 */}\n          <View\n            {...SliderResponder.panHandlers}\n            style={{\n              width: 210,\n              height: 22,\n              backgroundColor: \"#F8F8F8\",\n              borderRadius: 11,\n              borderWidth: 2,\n              borderStyle: \"solid\",\n              borderColor: \"#fff\",\n              display: \"flex\",\n              alignItems: \"flex-start\",\n              justifyContent: \"center\",\n              paddingHorizontal: 6,\n              position: \"relative\",\n              marginRight: 16,\n            }}\n          >\n            <LinearGradient\n              start={{ x: 0, y: 0 }}\n              end={{ x: 1, y: 0 }}\n              colors={[\"#F0A64D\", \"#F78240\"]}\n              style={{\n                width: sliderbtnDistance, // 滑块按钮距离左边的距离\n                height: 10,\n                borderRadius: 5,\n              }}\n            />\n          </View>\n          {/* 滑块按钮组件 */}\n          <View\n            {...SliderBtnResponder.panHandlers}\n            style={{\n              position: \"absolute\",\n              left: sliderbtnDistance,\n              transform: [{ scale: sliderBtnMoving ? 1.2 : 1 }],\n            }}\n          >\n            <View\n              style={{\n                opacity: sliderBtnMoving ? 1 : 0,\n                position: \"absolute\",\n                top: -24,\n                left: -((35 - sliderBtnWidth.current) / 2),\n                width: 35,\n                height: 24,\n              }}\n            >\n              <Image\n                style={{ position: \"absolute\", left: 0, top: 0 }}\n                source={IMAGES_ASSETS.bubble}\n              />\n\n              <Text\n                style={{\n                  fontSize: 14,\n                  lineHeight: 20,\n                  color: \"#fff\",\n                  width: \"100%\",\n                  textAlign: \"center\",\n                }}\n              >{`${finalNumRef.current}`}</Text>\n            </View>\n            <Image source={IMAGES_ASSETS.slider_btn} />\n          </View>\n        </View>\n        {/* 滑块加减组件 */}\n        <View\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n          }}\n        >\n          <View\n            onTouchStart={() => {\n              changeSliderDistance(sliderbtnDistance - sliderStep).then(() =>\n                props.finalChange?.(finalNumRef.current)\n              );\n            }}\n            style={{ marginRight: 9 }}\n          >\n            <Image source={IMAGES_ASSETS.slider_icon_left} />\n          </View>\n          <View\n            onTouchStart={() => {\n              changeSliderDistance(sliderbtnDistance + sliderStep).then(() =>\n                props.finalChange?.(finalNumRef.current)\n              );\n            }}\n          >\n            <Image source={IMAGES_ASSETS.slider_icon_right} />\n          </View>\n        </View>\n      </View>\n    );\n  };\n\nexport default forwardRef(SliderBar);\n"]}