{"version":3,"sources":["useTimer.ts"],"names":["useMemo","useState","zeroSupple","useTimer","props","unit","countDown","setCountDown","endTimestamp","Date","getTime","timer","timeDate","hour","parseInt","minute","second","start","expiryTimestamp","clearInterval","time","ms","setInterval"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAgBA,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAASC,UAAT,QAA2B,UAA3B;;AAyCA,MAAMC,QAAQ,GAAIC,KAAD,IAAkB;AACjC;AACF;AACA;AACE,QAAM;AAAEC,IAAAA,IAAI,GAAG;AAAT,MAAsBD,KAA5B;AACA;AACF;AACA;;AACE,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAD,CAA1C;AAEA;AACF;AACA;;AACE,QAAMO,YAAY,GAAGR,OAAO,CAAC,MAAM;AACjC,QAAIK,IAAI,IAAI,QAAZ,EAAsB;AACpB,aAAO,IAAII,IAAJ,GAAWC,OAAX,KAAuBJ,SAAS,GAAG,IAAZ,GAAmB,EAAjD;AACD,KAFD,MAEO;AACL,aAAO,IAAIG,IAAJ,GAAWC,OAAX,KAAuBJ,SAAS,GAAG,IAA1C;AACD;AACF,GAN2B,EAMzB,CAACA,SAAD,CANyB,CAA5B;AAOA;AACF;AACA;;AACE,MAAIK,KAAU,GAAG,IAAjB;AACA;AACF;AACA;;AACE,QAAMC,QAAQ,GAAGZ,OAAO,CAAW,MAAM;AACvC,QAAIK,IAAI,IAAI,QAAZ,EAAsB;AACpB,aAAO;AACLQ,QAAAA,IAAI,EAAEX,UAAU,CAACY,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAG,EAAnB,CAAT,CADX;AAELS,QAAAA,MAAM,EAAEb,UAAU,CAACY,QAAQ,CAAE,GAAER,SAAU,EAAd,CAAR,GAA2B,EAA5B;AAFb,OAAP;AAID,KALD,MAKO;AACL,aAAO;AACLO,QAAAA,IAAI,EAAEX,UAAU,CAACY,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAZ,GAAiB,EAAG,EAAxB,CAAT,CADX;AAELS,QAAAA,MAAM,EAAEb,UAAU,CAACY,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAG,EAAnB,CAAR,GAAgC,EAAjC,CAFb;AAGLU,QAAAA,MAAM,EAAEd,UAAU,CAACY,QAAQ,CAAE,GAAER,SAAS,GAAG,EAAG,EAAnB,CAAT;AAHb,OAAP;AAKD;AACF,GAbuB,EAarB,CAACA,SAAD,EAAYD,IAAZ,CAbqB,CAAxB;AAcA;AACF;AACA;;AACE,QAAMY,KAAK,GAAIC,eAAD,IAA6B;AACzCC,IAAAA,aAAa,CAACR,KAAD,CAAb;AAEA,QAAIS,IAAY,GAAGF,eAAnB;AACA,QAAIG,EAAU,GAAG,CAAjB;;AACA,QAAIhB,IAAI,IAAI,QAAZ,EAAsB;AACpBgB,MAAAA,EAAE,GAAG,IAAL;AACD,KAFD,MAEO,IAAIhB,IAAI,IAAI,QAAZ,EAAsB;AAC3BgB,MAAAA,EAAE,GAAG,OAAO,EAAZ;AACD;;AACDd,IAAAA,YAAY,CAACa,IAAD,CAAZ;AAEAT,IAAAA,KAAK,GAAGW,WAAW,CAAC,MAAM;AACxB,UAAIF,IAAI,IAAI,CAAZ,EAAe;AACbD,QAAAA,aAAa,CAACR,KAAD,CAAb;AACA;AACD;;AACDS,MAAAA,IAAI;AACJb,MAAAA,YAAY,CAACa,IAAD,CAAZ;AACD,KAPkB,EAOhBC,EAPgB,CAAnB;AAQD,GApBD;;AAsBA,SAAO;AAAEb,IAAAA,YAAF;AAAgBF,IAAAA,SAAhB;AAA2B,OAAGM,QAA9B;AAAwCK,IAAAA;AAAxC,GAAP;AACD,CAnED;;AAqEA,eAAed,QAAf","sourcesContent":["/*\n * @Author: John\n * @Date: 2021-06-30 15:53:03\n * @LastEditors: John\n * @LastEditTime: 2021-08-06 15:26:55\n */\nimport React, { useMemo, useState } from \"react\";\nimport { zeroSupple } from \"../utils\";\n\ninterface Props {\n  /**\n   * @description 倒计时基本单位\n   * @type {(\"second\" | \"minute\")}\n   * @memberof Props\n   */\n  unit: \"second\" | \"minute\";\n  /**\n   * @description 插槽slot\n   * @type {(React.FunctionComponent<{\n   *     endTimestamp: number;\n   *     countDown: number;\n   *   } & TimeDate>)}\n   * @memberof Props\n   */\n  slot?: React.FunctionComponent<\n    {\n      endTimestamp: number;\n      countDown: number;\n    } & TimeDate\n  >;\n  /**\n   * @description 传入的开始时间戳\n   * @type {number}\n   * @memberof Props\n   */\n  expiryTimestamp: number;\n}\n\n/**\n * @description 对外使用的时间数据\n * @interface TimeDate\n */\ninterface TimeDate {\n  hour: string;\n  second?: string;\n  minute: string;\n}\n\nconst useTimer = (props: Props) => {\n  /**\n   * 倒计时基本单位，以秒或者分计时\n   */\n  const { unit = \"second\" } = props;\n  /**\n   * 倒计时计时数，秒或者分\n   */\n  const [countDown, setCountDown] = useState(0);\n\n  /**\n   * 结束时间的时间戳\n   */\n  const endTimestamp = useMemo(() => {\n    if (unit == \"minute\") {\n      return new Date().getTime() + countDown * 1000 * 60;\n    } else {\n      return new Date().getTime() + countDown * 1000;\n    }\n  }, [countDown]);\n  /**\n   * 定时器\n   */\n  let timer: any = null;\n  /**\n   * 对外使用的时分秒转换数据\n   */\n  const timeDate = useMemo<TimeDate>(() => {\n    if (unit == \"minute\") {\n      return {\n        hour: zeroSupple(parseInt(`${countDown / 60}`)),\n        minute: zeroSupple(parseInt(`${countDown}`) % 60),\n      };\n    } else {\n      return {\n        hour: zeroSupple(parseInt(`${countDown / 60 / 60}`)),\n        minute: zeroSupple(parseInt(`${countDown / 60}`) % 60),\n        second: zeroSupple(parseInt(`${countDown % 60}`)),\n      };\n    }\n  }, [countDown, unit]);\n  /**\n   * 倒计时开始\n   */\n  const start = (expiryTimestamp: number) => {\n    clearInterval(timer);\n\n    let time: number = expiryTimestamp;\n    let ms: number = 0;\n    if (unit == \"second\") {\n      ms = 1000;\n    } else if (unit == \"minute\") {\n      ms = 1000 * 60;\n    }\n    setCountDown(time);\n\n    timer = setInterval(() => {\n      if (time == 0) {\n        clearInterval(timer);\n        return;\n      }\n      time--;\n      setCountDown(time);\n    }, ms);\n  };\n\n  return { endTimestamp, countDown, ...timeDate, start };\n};\n\nexport default useTimer;\n"]}